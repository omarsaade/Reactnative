

hene/
npx react-native init myapp --version 0.65
npm run android


nehna/
react-native init
npm run android

================================	
Globally:

1-react-native init MyApp 
2-cd MyApp
3-npm start     or react-native start
In a separate terminal or command prompt window, run the following command to start the app on your device or emulator:

4-react-native run-android

===========================
main axis 
 row: l to r , row reverse : r to l     // 1

 col: t to b , col reverse : b to t
 
cross axis
  row: t to b , row reverse : b to t    // 2

  col: r to l , col reverse : l to r 

justifycontent = main
alignitems =  cross


flex: 1 == width:99%
flex:2 ==...


Button doesnt have a  style prop

// el parent
flex: 1, //wrap content by default
========================================

onChangeText  mheme hayde ktir

lezem thet scrollview jawa el view deyman
scrollview hye limited naw3an ma ..yaane iza 3ana list fia 1000 shagle
sar este3mel el scrollview ma ktir mnih , li2an kell harake..btjib el list kella
its great for limited amount of content..like an article which have a fixed end at 
some point, but for dynamic list , it could be super long.
so we dont use scrollview
===================================

FlalList 3and alternative bel android esmo Recyclerview
it will only render the items that actually visible.

================================================
flalist
3anda galaza ano badda key metel el map , bas btenhat bi tari2a tenye
hala2

fina kamen na3mela bi tari2a tenye w netjanab el key ? kif



first meth:
===================================

Touchable is the old way
Pressable is the new way
=================================



=====================================================
run hol el tnen kell wahde menon bi separate terminal jawa el app
 adb reverse tcp:8097 tcp:8097
 reactdevtools
 w 3mol reload men baada bteftah el devtools
================================================

// adb reverse tcp:8097 tcp:8097




================================================



// https://unsplash.com/advertise

// how to open 2 screens ?
https://stackoverflow.com/questions/45588482/react-native-run-on-multiple-simultaneous-android-emulators
===============================================
                              
                              Responsiveness

Buidling Adapting user interfaces

1- maxWidth + width : a great mix
2- fontsize / Built in dimensions API


import {View, Text, StyleSheet, Dimensions} from 'react-native';
const deviceWidth = Dimensions.get('window').width;

const styles = StyleSheet.create({
  container: {
    padding: deviceWidth < 380 ? 12 : 24,
    margin: deviceWidth < 380 ? 12 : 24,
  },
  numberText: {
    color: Colors.accent500,
    fontSize: deviceWidth < 380 ? 28 : 36,
    fontFamily: 'OpenSans-Bold',
  },
});

====================================================================================
In case anyone was wondering how to get a dynamic border radius without hard coding it depending on the device size, this should always yield a perfect circle:



  width: deviceWidth < 380 ? "80%" : "100%",
         aspectRatio: 1,
         borderRadius: deviceWidth / 2,

=====================================================================



Dimensions api ahsan men ento testa3mel el pourcentage

========================================================================
//the code outside the component function will not be exexuted again
// yaane aasde hon bel render wel reevaluate malah y3aber el code li barra
// .. el component metel el style welli barra fo2 la noftered
// function masalan
========================================================


                        a new Hook

So any code that should react to device orientation
or size changes, should go into the component function
because this function, unlike the overall file code,
will get executed multiple times.
Now, React Native gives you an alternative way
of accessing the dimensions API, which allows you
to then react to device size or dimension changes
inside of component functions.
React Native gives you a hook, the use Window dimensions



  const {width, height} = useWindowDimensions();

<View style={[styles.rootContainer, {marginTop: marginTopDistance}]}>
      <Title>Guess My Number</Title>
      <Card>
....
instead of


// const deviceHeight = Dimensions.get('window').height;
    // marginTop: deviceHeight < 380 ? 30 : 100,

========================================================================
Using StyleSheet.create in dynamic styling

I had. thought about how to create the 'dynamic style' create in this lesson, and wondered if we can still make use of StyleSheet.create({}) to offer autocomplete whilst coding.  So I had a play around and it turns out that you can declare a new "dynamic" stylesheet within a functional component and apply this dynamically in response to a change of device orientation.  I've included a code snippet below that shows this in action though this should be read in the context of this lesson and not as standalone code.  Ellipsis indicate where the rest of the code sits.

const StartGameScreen = ({ startGame }) => {
    ...
 
    const { height } = useWindowDimensions();
    ...
    const dynamicStyles = StyleSheet.create({
      rootContainer: {
        marginTop: height < 380 ? 30 : 100,
      }
    });
 
    return (
      <View style={[styles.rootContainer, dynamicStyles.rootContainer]}>
      ...
      </View>
    );
}
 
const styles = StyleSheet.create({
 ...
});

==========================================================================


Managing Screen Content with KeyboardAvoidingView

we use this one for ios only
li2an el keyboard shaggale bel android

<KeyboardAvoidingView style={styles.screen} behavior="position">

hye bt5alina na3mul tab somewhere else to close the keyboard
================================================================

Was that really side effect of KeyboardAvoidingView Max?

Just to check, I deleted KeyboardAvoidingView and just kept ScrollView.

Now if i tap somewhere else other than Keyboard, keyboard still closes. (In both Android and iOS)



One another thing.

<KeyboardAvoidingView looses it's flex:1  style if you add "behavior='position'" as its attribute (if there is not ScrollView above it).



That being said app works same if we remove style attribute from KeyboardAvoidingView.

This wayðŸ‘‡

<ScrollView style={styles.screen}>
      <KeyboardAvoidingView behavior="position">
        <View style={[styles.rootContainer, { marginTop: marginTopDistance }]}>
          <Title>Guess My Number</Title>
          <Card>
            <InstructionText>Enter a Number</InstructionText>
            <TextInput
              style={styles.numberInput}
              maxLength={2}
              keyboardType="number-pad"
              autoCapitalize="none"
              autoCorrect={false}
              value={enteredNumber}
              onChangeText={numberInputHandler}
            />
            <View style={styles.buttonsContainer}>
              <View style={styles.buttonContainer}>
                <PrimaryButton onPress={resetInputHandler}>Reset</PrimaryButton>
              </View>
              <View style={styles.buttonContainer}>
                <PrimaryButton onPress={confirmInputHandler}>
                  Confirm
                </PrimaryButton>
              </View>
            </View>
          </Card>
        </View>
      </KeyboardAvoidingView>
    </ScrollView>

    ==================================================================

    portarit Mode cross
    landscape Mode main

    ==================================================

    6. Improving the Landscape Mode UI
=================================================


    Writing Platform-specific Code with the Platform API
    borderWidth: Platform.OS === 'android' ? 2 : 0,

    or   

        borderWidth: Platform.select({ios: 0, android: 2}),

===============================================================